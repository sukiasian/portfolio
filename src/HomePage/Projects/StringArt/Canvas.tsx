import React, { ReactNode, useLayoutEffect, useRef, useState, useCallback } from "react";
import { useEffect } from "react";
import Button from "../../../components/Button/Button";
import LinkWithIcon from "../../../components/Link/LinkWithIcon";

interface CanvasProps {
    pinsAmount: number;
}

export default function Canvas({ pinsAmount }: CanvasProps): ReactNode {
	const [isPhone, setIsPhone] = useState<boolean | null>(null);
	const [radius, setRadius] = useState<number | null>(null);
	const [sectorsArePopulated, setSectorsArePopulated] = useState(false);
    const ref = useRef<HTMLCanvasElement>(null);
	
	const pins = [16, 101, 14, 98, 17, 89, 21, 96, 11, 94, 16, 104, 18, 86, 22, 92, 12, 98, 20, 93, 26, 91, 24, 85, 13, 99, 10, 95, 8, 90, 28, 84, 181, 74, 172, 72, 170, 70, 166, 66, 164, 64, 171, 75, 159, 234, 142, 227, 136, 224, 133, 222, 137, 219, 128, 220, 134, 216, 138, 218, 129, 222, 131, 225, 133, 217, 142, 221, 140, 224, 146, 229, 139, 214, 144, 217, 130, 226, 132, 221, 147, 215, 135, 225, 139, 211, 131, 223, 144, 210, 134, 229, 149, 213, 130, 227, 152, 219, 141, 210, 147, 232, 144, 220, 127, 221, 137, 230, 133, 212, 138, 226, 143, 216, 148, 208, 150, 65, 168, 69, 175, 78, 14, 84, 20, 103, 19, 94, 12, 86, 6, 96, 15, 105, 19, 91, 31, 90, 27, 97, 9, 82, 22, 93, 17, 100, 8, 83, 22, 89, 32, 196, 50, 193, 48, 189, 56, 183, 44, 185, 53, 191, 47, 213, 147, 218, 134, 227, 140, 220, 138, 228, 150, 211, 153, 224, 128, 215, 137, 232, 156, 72, 157, 74, 161, 58, 182, 57, 188, 43, 209, 154, 216, 145, 210, 42, 192, 52, 186, 43, 194, 33, 87, 28, 92, 6, 98, 18, 92, 21, 108, 24, 81, 179, 71, 174, 62, 181, 60, 160, 77, 176, 59, 186, 48, 197, 37, 203, 124, 207, 151, 64, 169, 79, 163, 65, 180, 63, 173, 73, 155, 206, 40, 194, 51, 183, 54, 178, 72, 4, 84, 32, 195, 38, 202, 126, 222, 135, 209, 146, 214, 46, 187, 42, 208, 140, 204, 150, 66, 152, 225, 127, 218, 52, 181, 55, 161, 76, 12, 79, 26, 96, 10, 100, 25, 198, 30, 82, 165, 60, 175, 79, 3, 91, 29, 95, 18, 106, 16, 76, 167, 81, 33, 90, 13, 102, 21, 86, 35, 198, 124, 212, 148, 230, 132, 215, 40, 190, 54, 184, 49, 195, 122, 203, 156, 208, 149, 67, 173, 56, 177, 59, 146, 234, 136, 229, 141, 217, 129, 201, 47, 212, 38, 218, 42, 205, 151, 200, 52, 188, 41, 211, 141, 223, 158, 78, 28, 202, 142, 214, 36, 84, 164, 62, 176, 68, 169, 73, 17, 83, 165, 237, 73, 22, 76, 239, 78, 159, 205, 31, 191, 51, 216, 131, 231, 139, 224, 35, 219, 159, 61, 183, 55, 178, 82, 19, 97, 7, 125, 205, 136, 213, 155, 204, 24, 72, 0, 75, 31, 94, 15, 97, 5, 126, 11, 95, 27, 200, 145, 196, 29, 87, 35, 80, 168, 237, 160, 202, 157, 207, 150, 63, 175, 72, 7, 101, 9, 124, 209, 148, 64, 161, 200, 48, 226, 129, 228, 133, 201, 158, 71, 13, 122, 10, 81, 38, 220, 30, 77, 165, 226, 154, 207, 28, 89, 20, 211, 145, 61, 180, 53, 186, 51, 224, 156, 75, 36, 227, 151, 197, 141, 235, 135, 233, 150, 82, 23, 111, 27, 221, 56, 160, 206, 22, 91, 12, 103, 41, 192, 44, 202, 125, 8, 128, 201, 36, 85, 30, 216, 130, 197, 156, 113, 1, 80, 40, 230, 46, 190, 134, 199, 161, 216, 153, 66, 177, 58, 187, 47, 228, 29, 72, 32, 204, 121, 11, 99, 14, 203, 43, 99, 25, 113, 163, 234, 109, 157, 58, 143, 219, 129, 5, 117, 28, 76, 170, 89, 168, 223, 24, 80, 174, 84, 39, 193, 149, 198, 164, 233, 143, 213, 31, 226, 41, 78, 27, 216, 123, 9, 127, 202, 46, 98, 44, 93, 148, 83, 15, 121, 199, 130, 192, 152, 196, 162, 82, 154, 91, 25, 222, 55, 190, 4, 74, 38, 104, 147, 199, 50, 217, 18, 198, 138, 233, 110, 149, 100, 5, 93, 48, 235, 108, 36, 203, 123, 210, 27, 227, 22, 97, 143, 197, 39, 102, 43, 82, 182, 59, 166, 231, 151, 69, 172, 0, 114, 173, 88, 185, 54, 142, 105, 158, 195, 165, 212, 130, 4, 66, 31, 209, 132, 191, 45, 232, 35, 207, 12, 211, 154, 114, 169, 230, 24, 216, 39, 72, 36, 204, 161, 115, 29, 110, 24, 209, 166, 224, 130, 7, 85, 146, 219, 126, 6, 189, 153, 84, 30, 107, 42, 74, 33, 78, 45, 182, 79, 156, 90, 143, 110, 156, 210, 15, 218, 22, 78, 4, 118, 27, 89, 150, 232, 165, 194, 123, 213, 151, 48, 102, 144, 94, 131, 187, 50, 91, 172, 65, 6, 198, 28, 189, 157, 235, 145, 89, 34, 234, 149, 114, 142, 237, 162, 54, 234, 59, 184, 53, 96, 3, 87, 186, 142, 111, 174, 64, 8, 213, 163, 198, 3, 122, 206, 168, 71, 44, 106, 32, 82, 36, 105, 135, 91, 162, 103, 138, 90, 19, 229, 106, 144, 236, 45, 210, 22, 224, 49, 202, 137, 187, 158, 206, 16, 120, 12, 220, 154, 48, 76, 177, 61, 149, 91, 129, 200, 25, 203, 170, 222, 34, 72, 41, 207, 125, 192, 168, 193, 34, 76, 6, 73, 46, 86, 163, 81, 238, 164, 77, 239, 173, 230, 18, 108, 133, 214, 16, 223, 101, 148, 195, 131, 98, 151, 190, 136, 199, 31, 121, 209, 28, 75, 17, 105, 136, 207, 167, 90, 158, 56, 179, 66, 37, 221, 125, 196, 42, 101, 140, 198, 53, 81, 155, 186, 18, 79, 2, 92, 45, 81, 124, 188, 31, 234, 26, 218, 12, 224, 151, 87, 20, 225, 144, 57, 220, 173, 201, 39, 83, 140, 115, 168, 195, 46, 74, 167, 231, 38, 107, 20, 236, 138, 95, 24, 92, 127, 98, 154, 222, 102, 23, 67, 171, 189, 164, 215, 174, 218, 160, 96, 20, 220, 108, 131, 210, 36, 67, 46, 79, 14, 226, 149, 116, 159, 80, 26, 84, 13, 116, 153, 108, 144, 190, 89, 7, 226, 101, 145, 186, 159, 238, 80, 126, 204, 5, 77, 15, 64, 38, 76, 51, 227, 34, 215, 149, 206, 133, 92, 9, 229, 11, 86, 29, 224, 161, 196, 157, 87, 171, 221, 104, 125, 216, 168, 205, 144, 230, 55, 224, 134, 104, 226, 20, 74, 44, 96, 154, 188, 171, 196, 121, 92, 27, 213, 39, 209, 52, 73, 31, 78, 176, 206, 126, 36, 98, 147, 227, 111, 129, 107, 13, 82, 174, 211, 126, 193, 3, 187, 79, 37, 103, 137, 89, 184, 25, 236, 18, 100, 40, 179, 137, 100, 54, 166, 234, 21, 83, 0, 66, 41, 75, 2, 199, 152, 221, 158, 231, 170, 113, 136, 223, 148, 60, 142, 100, 50, 72, 18, 202, 156, 47, 95, 162, 186, 138, 200, 134, 114, 24, 214, 121, 82, 144, 194, 174, 192, 30, 80, 11, 226, 160, 79, 54, 197, 27, 232, 6, 154, 8, 234, 43, 225, 23, 216, 162, 192, 127, 203, 151, 44, 67, 48, 137, 112, 129, 32, 101, 211, 143, 228, 21, 104, 216, 142, 109, 35, 75, 8, 96, 52, 222, 145, 56, 92, 32, 183, 164, 235, 7, 186, 171, 202, 128, 191, 36, 71, 2, 82, 27, 112, 140, 88, 149, 210, 166, 76, 27, 87, 24, 235, 19, 134, 116, 166, 198, 156, 219, 139, 92, 50, 81, 149, 44, 222, 23, 176, 200, 21, 93, 119, 193, 172, 112, 128, 100, 218, 7, 233, 51, 151, 229, 41, 239, 16, 204, 137, 46, 66, 8, 150, 78, 161, 217, 136, 221, 60, 100, 159, 203, 163, 192, 49, 214, 6, 234, 14, 220, 130, 35, 212, 144, 187, 169, 189, 139, 117, 136, 111, 52, 98, 214, 175, 208, 124, 102, 17, 164, 213, 131, 191, 81, 36, 100, 44, 83, 31, 232, 53, 74, 9, 204, 145, 106, 40, 91, 10, 67, 28, 205, 152, 185, 164, 108, 151, 208, 138, 84, 7, 229, 160, 197, 7, 69, 153, 227, 100, 114, 145, 184, 169, 35, 127, 140, 228, 26, 77, 47, 64, 18, 0, 175, 96, 38, 56, 86, 25, 211, 226, 170, 208, 133, 223, 14, 67, 40, 82, 16, 29, 225, 155, 209, 196, 93, 55, 41, 94, 30, 215, 105, 210, 127, 142, 134, 148, 112, 156, 106, 98, 90, 42, 149, 97, 218, 158, 12, 73, 50, 152, 194, 166, 208, 158, 235, 6, 16, 217, 140, 188, 172, 202, 37, 101, 24, 8, 211, 224, 11, 233, 34, 44, 38, 46, 209, 128, 111, 141, 55, 98, 91, 104, 92, 57, 79, 1, 188, 174, 164, 151, 142, 150, 158, 164, 222, 142, 126, 215, 35, 91, 100, 126, 136, 149, 174, 24, 16, 22, 62, 223, 234, 226, 218, 211, 147, 197, 209, 192, 202, 196, 186, 119, 201, 141, 232, 36, 223, 162, 195, 94, 39, 78, 15, 29, 22, 85, 165, 15, 98, 108, 124, 136, 142, 149, 158, 151, 232, 218, 224, 214, 137, 43, 67, 30, 238, 6, 12, 34, 230, 140, 211, 202, 209, 204, 169, 70, 236, 42, 152, 168, 164, 126, 89, 31, 38, 173, 118, 131, 220, 179, 198, 142, 148, 46, 56, 28, 16, 66, 50, 87, 75, 7, 94, 27, 73, 15, 86, 76, 82, 91, 101, 209, 218, 210, 202, 132, 136, 144, 149, 156, 168, 174, 158, 168, 234, 220, 155, 191, 177, 202, 197, 123, 199, 143, 109, 49, 234, 137, 224, 216, 211, 187, 196, 192, 147, 207, 134, 226, 151, 156, 164, 171, 239, 29, 24, 12, 7, 29, 38, 45, 94, 63, 152, 217, 21, 82, 72, 237, 40, 31, 36, 60, 86, 78, 84, 76, 4, 26, 113, 104, 98, 137, 151, 132, 210, 228, 233, 161, 214, 130, 223, 58, 106, 20, 11, 6, 236, 33, 76, 81, 13, 79, 25, 44, 40, 97, 129, 188, 196, 200, 204, 211, 166, 160, 164, 176, 146, 183, 218, 229, 145, 227, 161, 201, 196, 191, 186, 192, 187, 173, 168, 225, 54, 94, 209, 144, 129, 38, 30, 22, 15, 58, 87, 71, 5, 74, 17, 22, 9, 66, 33, 98, 92, 30, 24, 31, 53, 114, 104, 108, 96, 104, 111, 76, 72, 47, 87, 82, 29, 36, 48, 44, 54, 21, 77, 1, 177, 22, 12, 16, 20, 131, 126, 116, 98, 26, 52, 235, 209, 216, 233, 229, 224, 220, 139, 203, 149, 164, 118, 148, 62, 84, 90, 45, 36, 52, 87, 41, 44, 39, 90, 96, 194, 121, 142, 177, 223, 220, 136, 140, 151, 159, 144, 40, 4, 234, 174, 170, 173, 235, 206, 134, 189, 205, 143, 220, 211, 199, 125, 158, 162, 208, 202, 167, 228, 224, 231, 228, 158, 126, 132, 127, 131, 136, 141, 213, 173, 169, 164, 123, 181, 196, 199, 192, 153, 48, 31, 14, 6, 67, 12, 8, 81, 86, 72, 114, 108, 89, 102, 98, 89, 101, 51, 66, 18, 166, 237, 75, 54, 50, 94, 32, 4, 79, 76, 71, 239, 178, 214, 223, 132, 134, 136, 122, 147, 174, 226, 231, 156, 150, 196, 0, 51, 2, 12, 84, 89, 100, 104, 116, 124, 196, 8, 76, 15, 24, 22, 60, 3, 191, 187, 210, 204, 127, 130, 162, 160, 163, 161, 219, 224, 221, 151, 120, 193, 118, 90, 24, 28, 91, 96, 30, 36, 38, 48, 46, 44, 103, 101, 104, 39, 36, 87, 55, 32, 79, 84, 54, 48, 98, 96, 209, 136, 139, 132, 146, 64, 9, 14, 16, 21, 73, 11, 16, 19, 78, 82, 77, 72, 74, 76, 10, 6, 4, 30, 11, 161, 158, 215, 211, 214, 201, 153, 173, 195, 136, 230, 233, 182, 131, 208, 168, 166, 184, 125, 181, 223, 154, 130, 167, 235, 160, 158, 163, 168, 116, 123, 152, 132, 222, 234, 228, 226, 216, 239, 75, 5, 65, 30, 51, 54, 24, 20, 62, 27, 67, 15, 71, 9, 12, 14, 76, 13, 4, 67, 21, 31, 34, 66, 239, 176, 225, 218, 216, 202, 198, 196, 194, 192, 206, 204, 202, 199, 200, 202, 122, 135, 142, 137, 146, 149, 143, 176, 194, 2, 80, 82, 84, 88, 91, 89, 86, 84, 74, 78, 3, 6, 8, 78, 110, 114, 109, 112, 108, 103, 98, 99, 108, 105, 89, 26, 29, 75, 44, 49, 12, 10, 24, 26, 85, 53, 50, 56, 17, 14, 18, 80, 13, 67, 45, 135, 146, 144, 126, 124, 160, 154, 151, 129, 210, 216, 133, 193, 232, 229, 186, 189, 222, 162, 164, 230, 182, 221, 223, 226, 224, 236, 234, 213, 203, 179, 121, 175, 135, 191, 188, 226, 219, 202, 4, 54, 95, 33, 15, 75, 3, 58, 92, 52, 50, 93, 63, 17, 32, 36, 44, 29, 23, 78, 237, 137, 115, 116, 114, 45, 85, 17, 72, 3, 184, 192, 190, 235, 198, 192, 165, 124, 151, 155, 127, 150, 144, 142, 138, 136, 157, 232, 233, 231, 229, 212, 136, 177, 221, 220, 216, 227, 228, 141, 132, 162, 168, 169, 166, 129, 189, 162, 125, 201, 204, 194, 122, 116, 113, 108, 109, 103, 96, 92, 36, 34, 8, 74, 77, 78, 76, 73, 74, 79, 21, 47, 91, 42, 46, 40, 41, 38, 138, 184, 209, 4, 7, 73, 13, 77, 27, 35, 73, 5, 16, 57, 78, 54, 52, 83, 24, 67, 65, 66, 7, 25, 29, 81, 82, 86, 88, ];
    const sectorsAmount = 4;
    const pinsPerSector = pinsAmount / sectorsAmount;

    const sectorNames = ["A", "B", "C", "D"];
    const onePinStepAngleDegree = 90 / pinsPerSector;
	
    const toRadian = (angle: number): number => {
		return (angle * Math.PI) / 180;
    };
	
    const getP2X = (angleDeviation: number) => {
        return radius! * Math.cos(toRadian(angleDeviation));
    };
    const getP2Y = (angleDeviation: number) => {
        return radius! * Math.sin(toRadian(angleDeviation));
    };

    const connectTwoPinsWithString = (pin1: number, pin2: number): void => {
        if (ref.current) {			
            const ctx = ref.current.getContext("2d");

            const pinElement1 = document.getElementById(pin1.toString());

            const pinElement1PositionLeft =
                pinElement1!.offsetLeft;
            const pinElement1PositionTop =
                pinElement1!.offsetTop;

            const pinElement2 = document.getElementById(pin2.toString());

            const pinElement2PositionLeft =
                pinElement2!.offsetLeft;
            const pinElement2PositionTop =
                pinElement2!.offsetTop;

            ctx!.lineWidth = 0.5;
			ctx!.globalAlpha = 0.4;

            ctx?.beginPath();
            ctx?.moveTo(pinElement1PositionLeft, pinElement1PositionTop);

            ctx?.lineTo(pinElement2PositionLeft, pinElement2PositionTop);

            ctx?.closePath();
            ctx?.stroke();
        }
    };

    const drawGradually = (): void => {    
		const canvas = ref.current;
		const ctx = canvas?.getContext('2d');

		ctx?.clearRect(0, 0, canvas!.width, canvas!.height);

		let currentPinIndex = 0;

		const interval = setInterval(() => { 
			if (currentPinIndex < pins.length - 1) { 
				connectTwoPinsWithString(pins[currentPinIndex], pins[currentPinIndex + 1]);

				currentPinIndex += 1;
			} else { 
				clearInterval(interval);
			}
		}, 1);
    };

	const drawAtOnce = (): void => {        
		let currentPin: number;
        let nextPin: number;

        pins.forEach((pin, i) => {
            if (i < pins.length - 1) {
                currentPin = pin;
                nextPin = pins[i + 1];
				
                connectTwoPinsWithString(currentPin, nextPin);
            }
        });
	};
    const populateSector = (deviationAtStart: number) => {
        for (let i = 0; i < pinsPerSector; i++) {
            const currentAngle = deviationAtStart + onePinStepAngleDegree * i;

            const p2x = getP2X(currentAngle);
            const p2y = getP2Y(currentAngle);

            const el = document.createElement("div");
            document.querySelector(".canvas-pins")!.appendChild(el);
			console.log(radius);
			
            const sectorIndex = (deviationAtStart + 90) / 90;
            const sectorName = sectorNames[sectorIndex];
            const numberAtSequence = sectorIndex * pinsPerSector + i;

            const letterWithNumber = sectorName + i;

            el.setAttribute("id", numberAtSequence.toString());
            el.setAttribute("data-tag", letterWithNumber);

            const style = el.style;

            style.position = "absolute";
            style.width = "2px";
            style.height = "2px";
            style.borderRadius = "100px";
            style.backgroundColor = "white";
			
            style.top = `${p2y + radius!}px`;
            style.left = `${p2x + radius!}px`;
        }
    };

    const populateAllSectors = (): void => {
        let sectorAngleDeviation = -90;

        for (let i = 0; i < sectorsAmount; i++) {
            populateSector(sectorAngleDeviation);

            sectorAngleDeviation += 90;
        }
		
		setSectorsArePopulated(true);
    };

	const getDiameter = useCallback((): number => { 
		return radius! * 2;
	}, [radius]);

	useLayoutEffect(() => { 
		setIsPhone(window.innerWidth < 600);
	}, []);
	
	useLayoutEffect(() => { 
		if(isPhone !== null) { 
			setRadius(isPhone ? 90 : 180);
		}
	}, [isPhone]);
	
	useEffect(() => {
		if(radius !== null) { 
			populateAllSectors();
		}
    }, [radius]);

	useEffect(() => { 
		if(sectorsArePopulated) { 
			drawAtOnce();
		}
	}, [sectorsArePopulated]);
	
    return (
		<div className="canvas">
			<div
				className="canvas-pins"
				style={{
					width: `${getDiameter()}px`,
					height: `${getDiameter()}px`,
				}}
			>
				<canvas
					ref={ref}
					width={getDiameter()}
					height={getDiameter()}
				/>
			</div>
			<Button classNames="button--primary" onClick={drawGradually}>Start drawing</Button>
			<LinkWithIcon classNames='link--github' href="https://www.github.com/sukiasian/string-art-generator">See on Github</LinkWithIcon>
		</div>
    );
};